name: "release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version of this pathfinder release. This will create a new tag (triggering docker action) and also set the package version."
        required: true
        type: string

jobs:
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Update pathfinder package version
      #   run: echo 'Might be difficult to do and commit to main?'

      # - name: switching from HTTPS to SSH
      #   run: git remote set-url origin ${{ secrets.BOT_SSH }}

      # - name: commit
      #   run: |
      #     # not inline because otherwise github's yaml parser misinterprets the colon as a mapping.
      #     git commit -m 'feat: version ${{ github.event.inputs.version }}'

      # - name: push
      #   run: git push origin HEAD:master

      # - name: tag ${{ github.event.inputs.version }}
      #   run: |
      #     git tag ${{ github.event.inputs.version }}
      #     git push origin ${{ github.event.inputs.version }}

      - name: Create tag
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          # HASH=$(git rev-parse HEAD)
          # echo $HASH
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/Mirko-von-Leipzig/release_tester/git/refs \
            -f ref='refs/tags/example' \
            -f sha='ed56f70653797b97272bc8b59bb3bb39ce24f382'

      - name: Create release notes draft
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
              /repos/Mirko-von-Leipzig/release_tester/releases \
            -f tag_name='${{ github.event.inputs.version }}' \
            -f target_commitish='master' \
            -f name='${{ github.event.inputs.version }}' \
            -f body='Description of the release' \
            -F draft=true \
            -F prerelease=false \
            -F generate_release_notes=true 